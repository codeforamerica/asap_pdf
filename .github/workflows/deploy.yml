# yaml-language-server: $schema=https://json.schemastore.org/github-workflow.json

name: Deploy to AWS

on:
  push:
    branches: [ "main", "dev" ]
  workflow_dispatch:
    inputs:
      environment:
        type: choice
        description: Environment
        required: true
        options:
          - staging
          - production

jobs:
  determine_environment:
    runs-on: ubuntu-latest
    outputs:
      env_name: ${{ steps.set_env.outputs.environment_name }}
    steps:
      - name: Set environment name
        id: set_env
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            echo "environment_name=${{ github.event.inputs.environment }}" >> "$GITHUB_OUTPUT"
          elif [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            echo "environment_name=production" >> "$GITHUB_OUTPUT"
          elif [[ "${{ github.ref }}" == "refs/heads/dev" ]]; then
            echo "environment_name=staging" >> "$GITHUB_OUTPUT"
          else
            echo "environment_name=development" >> "$GITHUB_OUTPUT"
          fi

  deploy:
    needs: [determine_environment]
    runs-on: ubuntu-latest
    environment:
      name: ${{ needs.determine_environment.outputs.env_name }}
    steps:
      - name: Deploy to environment
        run: echo "Deploying to ${{ needs.determine_environment.outputs.env_name }} AWS_ACCOUNT_ID ${{ env.AWS_ACCOUNT_ID }}"

#    steps:
#      - name: Checkout
#        uses: actions/checkout@v5
#
#      - name: Debug OIDC claims
#        run: |
#          echo "GitHub repository: ${{ github.repository }}"
#          echo "GitHub ref: ${{ github.ref }}"
#          echo "GitHub SHA: ${{ github.sha }}"
#          echo "Actor: ${{ github.actor }}"
#          echo "Event name: ${{ github.event_name }}"
#          echo "Workflow ref: ${{ github.workflow_ref }}"
#          echo "Environment: ${{ github.environment }}"
#          echo "Job: ${{ github.job }}"
#
#      - name: Debug AWS role
#        run: |
#          echo "Attempting to assume role with:"
#          echo "Repository: repo:${{ github.repository }}:*"
#          echo "Repository ref: repo:${{ github.repository }}:ref:${{ github.ref }}"
#
#      - name: Configure AWS credentials
#        uses: aws-actions/configure-aws-credentials@v4
#        with:
#          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
#          aws-region: ${{ env.AWS_REGION }}
#          audience: "sts.amazonaws.com"
#          role-session-name: "GitHubActions-${{ github.run_id }}"
#          mask-aws-account-id: false
#          role-duration-seconds: 900 # 15 minutes
#
#      - name: Login to Amazon ECR
#        id: login-ecr
#        uses: aws-actions/amazon-ecr-login@v2
#
#      - name: Build, tag, and push Document Inference Lambda image to ECR
#        id: build-document-inference-image
#        env:
#          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
#          ECR_REPOSITORY: ${{ env.ECR_DOCUMENT_INFERENCE_REPOSITORY }}
#          IMAGE_TAG: ${{ github.sha }}
#        run: |
#          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG -t $ECR_REGISTRY/$ECR_REPOSITORY:latest python_components/document_inference/.
#          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
#          docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
#          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT
#
#      - name: Update Document Inference Lambda
#        id: update-document-inference-lambda
#        env:
#          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
#          ECR_REPOSITORY: ${{ env.ECR_DOCUMENT_INFERENCE_REPOSITORY }}
#          IMAGE_TAG: ${{ github.sha }}
#          FUNCTION_NAME: "asap-pdf-document-inference-production"
#        run: |
#          aws lambda update-function-code \
#             --function-name  $FUNCTION_NAME \
#             --image-uri $ECR_REGISTRY/$ECR_REPOSITORY:latest
#
#      - name: Build, tag, and push Rails App image to Amazon ECR
#        id: build-image
#        env:
#          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
#          ECR_REPOSITORY: ${{ env.ECR_APP_REPOSITORY }}
#          IMAGE_TAG: ${{ github.sha }}
#        run: |
#          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
#          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
#          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT
#
#      - name: Update SSM Version Parameter
#        env:
#          IMAGE_TAG: ${{ github.sha }}
#        run: |
#          echo "tag:$IMAGE_TAG"
#          aws ssm put-parameter \
#            --name /asap-pdf/production/app/version \
#            --value "$IMAGE_TAG" \
#            --overwrite
#
#      - name: Setup OpenTofu
#        uses: opentofu/setup-opentofu@v1
#
#      - name: Initialize OpenTofu
#        working-directory: ./terraform
#        run: tofu init
#
#      - name: Apply changes
#        working-directory: ./terraform
#        run: tofu apply --auto-approve
#
#      - name: Debug deployment failure
#        if: failure() && steps.deploy.outcome == 'failure'
#        uses: aws-actions/configure-aws-credentials@v4
#        with:
#          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
#          aws-region: ${{ env.AWS_REGION }}
#          audience: "sts.amazonaws.com"
#          role-session-name: "GitHubActions-Debug-${{ github.run_id }}"
#          mask-aws-account-id: false
#          role-duration-seconds: 900