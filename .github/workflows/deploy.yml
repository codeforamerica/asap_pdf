# yaml-language-server: $schema=https://json.schemastore.org/github-workflow.json

name: Deploy to AWS

on:
  push:
    branches: [ "main" ]

env:
  AWS_REGION: us-east-1
  ECR_APP_REPOSITORY: asap-pdf-production-app
  ECR_DOCUMENT_INFERENCE_REPOSITORY: asap-pdf-lambda-document-inference-production
  ECS_CLUSTER: asap-pdf-production-app
  ECS_SERVICE: asap-pdf-production-app
  ECS_TASK_DEFINITION: .aws/task-definition.json
  AWS_ACCOUNT_ID: 073165201938

permissions:
  contents: read
  id-token: write

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    environment: production

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Debug OIDC claims
        run: |
          echo "GitHub repository: ${{ github.repository }}"
          echo "GitHub ref: ${{ github.ref }}"
          echo "GitHub SHA: ${{ github.sha }}"
          echo "Actor: ${{ github.actor }}"
          echo "Event name: ${{ github.event_name }}"
          echo "Workflow ref: ${{ github.workflow_ref }}"
          echo "Environment: ${{ github.environment }}"
          echo "Job: ${{ github.job }}"

      - name: Debug AWS role
        run: |
          echo "Attempting to assume role with:"
          echo "Repository: repo:${{ github.repository }}:*"
          echo "Repository ref: repo:${{ github.repository }}:ref:${{ github.ref }}"

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}
          audience: "sts.amazonaws.com"
          role-session-name: "GitHubActions-${{ github.run_id }}"
          mask-aws-account-id: false
          role-duration-seconds: 900 # 15 minutes

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build, tag, and push Document Inference Lambda image to ECR
        id: build-document-inference-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ env.ECR_DOCUMENT_INFERENCE_REPOSITORY }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG -t $ECR_REGISTRY/$ECR_REPOSITORY:latest python_components/document_inference/.
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

      - name: Update Document Inference Lambda
        id: update-document-inference-lambda
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ env.ECR_DOCUMENT_INFERENCE_REPOSITORY }}
          IMAGE_TAG: ${{ github.sha }}
          FUNCTION_NAME: "asap-pdf-document-inference-production"
        run: |
          aws lambda update-function-code \
             --function-name  $FUNCTION_NAME \
             --image-uri $ECR_REGISTRY/$ECR_REPOSITORY:latest

      - name: Build, tag, and push Rails App image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ env.ECR_APP_REPOSITORY }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

      - name: Fill in the new image ID in the Amazon ECS task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: ${{ env.ECS_TASK_DEFINITION }}
          container-name: app
          image: ${{ steps.build-image.outputs.image }}

      - name: Deploy Amazon ECS task definition
        id: deploy
        uses: aws-actions/amazon-ecs-deploy-task-definition@v2
        timeout-minutes: 5
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: ${{ env.ECS_SERVICE }}
          cluster: ${{ env.ECS_CLUSTER }}
          wait-for-service-stability: true
          wait-for-minutes: 5

      - name: Debug deployment failure
        if: failure() && steps.deploy.outcome == 'failure'
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}
          audience: "sts.amazonaws.com"
          role-session-name: "GitHubActions-Debug-${{ github.run_id }}"
          mask-aws-account-id: false
          role-duration-seconds: 900

      - name: Fetch deployment debug info
        if: failure() && steps.deploy.outcome == 'failure'
        run: |
          echo "=== Fetching ECS Service Events ==="
          aws ecs describe-services \
            --cluster ${{ env.ECS_CLUSTER }} \
            --services ${{ env.ECS_SERVICE }} \
            --query 'services[0].events[0:5]'
          
          echo "=== Fetching Latest Task Info ==="
          TASK_ARN=$(aws ecs list-tasks \
            --cluster ${{ env.ECS_CLUSTER }} \
            --service-name ${{ env.ECS_SERVICE }} \
            --desired-status RUNNING \
            --query 'taskArns[0]' \
            --output text)
          
          if [ ! -z "$TASK_ARN" ]; then
            echo "Latest task: $TASK_ARN"
            aws ecs describe-tasks \
              --cluster ${{ env.ECS_CLUSTER }} \
              --tasks $TASK_ARN \
              --query 'tasks[0].{lastStatus:lastStatus,desiredStatus:desiredStatus,stoppedReason:stoppedReason,containers:containers[*].{name:name,lastStatus:lastStatus,reason:reason,exitCode:exitCode}}'
          
            echo "=== Container Logs ==="
            TASK_ID=$(echo $TASK_ARN | awk -F'/' '{print $3}')
            aws logs get-log-events \
              --log-group-name /ecs/asap-pdf-production \
              --log-stream-name /web/app/$TASK_ID \
              --limit 50 \
              --query 'events[*].message'
          else
            echo "No running tasks found"
          
            echo "=== Checking Stopped Tasks ==="
            STOPPED_TASK=$(aws ecs list-tasks \
              --cluster ${{ env.ECS_CLUSTER }} \
              --service-name ${{ env.ECS_SERVICE }} \
              --desired-status STOPPED \
              --query 'taskArns[0]' \
              --output text)
          
            if [ ! -z "$STOPPED_TASK" ]; then
              echo "Latest stopped task: $STOPPED_TASK"
              aws ecs describe-tasks \
                --cluster ${{ env.ECS_CLUSTER }} \
                --tasks $STOPPED_TASK \
                --query 'tasks[0].{lastStatus:lastStatus,stoppedReason:stoppedReason,containers:containers[*].{name:name,lastStatus:lastStatus,reason:reason,exitCode:exitCode}}'
            fi
          fi
