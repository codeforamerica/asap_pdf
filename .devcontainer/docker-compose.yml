version: '3'

services:
  app:
    build:
      context: ..
      dockerfile: .devcontainer/Dockerfile
    environment:
      - DATABASE_HOST=db
      - DATABASE_USER=postgres
      - DATABASE_PASSWORD=postgres
    volumes:
      - ../..:/workspaces:cached

    # Overrides default command so things don't shut down after the process ends.
    command: sleep infinity

    # Runs app on the same network as the database container, allows "forwardPorts" in devcontainer.json function.
    #network_mode: service:db

    # Use "forwardPorts" in **devcontainer.json** to forward an app port locally.
    # (Adding the "ports" property to this file will not forward from a Codespace.)
  redis:
    image: redis:latest
  db:
    image: postgres:latest
    restart: unless-stopped
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./create-db-user.sql:/docker-entrypoint-initdb.d/create-db-user.sql
    environment:
      POSTGRES_USER: postgres
      POSTGRES_DB: postgres
      POSTGRES_PASSWORD: postgres
      # Your config/database.yml should use the user and password you set here,
      # and host "db" (as that's the name of this service). You can use whatever
      # database name you want. Use `bin/rails db:prepare` to create the database.
      #
      # Example:
      #
      #  development:
      #    <<: *default
      #    host: db
      #    username: postgres
      #    password: postgres
      #    database: myapp_development

    # Add "forwardPorts": ["5432"] to **devcontainer.json** to forward PostgreSQL locally.
    # (Adding the "ports" property to this file will not forward from a Codespace.)

  localstack:
    image: localstack/localstack:latest
    ports:
      - "4566:4566"  # LocalStack edge port
    environment:
      - SERVICES=s3,lambda,logs,secretsmanager
      - AWS_DEFAULT_REGION=us-east-1
      - DOCKER_HOST=unix:///var/run/docker.sock
    volumes:
      - ./tmp/localstack:/var/lib/localstack
      - /var/run/docker.sock:/var/run/docker.sock
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:4566/_localstack/health"]
      interval: 5s
      timeout: 5s
      retries: 3
  setup:
    image: amazon/aws-cli:latest
    container_name: asap_setup
    environment:
      - AWS_REGION=us-east-1
      - AWS_ACCESS_KEY_ID=none
      - AWS_SECRET_ACCESS_KEY=none
    volumes:
      - ../bin/setup-localstack:/setup-localstack
    entrypoint: ["/bin/bash", "/setup-localstack"]
    depends_on:
      localstack:
        condition: service_healthy
  lambda_document_inference:
    build:
      context: ../python_components/document_inference
    container_name: lambda_document_inference
    extra_hosts:
      - "host.docker.internal:host-gateway"
    ports:
      - "9002:8080"
    environment:
      - ASAP_LOCAL_MODE=True
    volumes:
      - ../python_components/document_inference:/var/task
  lambda_evaluation:
    container_name: lambda_evaluation
    build:
      context: ../python_components/evaluation
    extra_hosts:
      - "host.docker.internal:host-gateway"
    ports:
      - "9003:8080"
    environment:
      - ASAP_LOCAL_MODE=True
    command: [ "lambda_function.handler" ]
    entrypoint: ["/bin/bash", "/usr/local/bin/entrypoint.sh"]
    volumes:
      - ../python_components/evaluation:/var/task

volumes:
  postgres-data:
